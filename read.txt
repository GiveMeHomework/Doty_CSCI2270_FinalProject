The program I make will take user inputs and use them to choose a node that relates to what the user wants
(the nodes will have a weighted network format similar to the cities problem)
after finding what nodes are required by the user, (either by direct input or solving based on questions), the program will solve for a path to take between the nodes.

Anticipated methods include:
adding a node/paths
deleting a node/paths
solve for min distance to a node
solve for shortest paths that need to interact with multiple specified nodes
solve all A-B node paths from node A
print verticies by name
traverse the nodes manually/interact
print progress (ie: what has been collected so far)
interact with node A (used when AT a vertex, and trying to change it in some way)
interact with node B used to change a different property about the current vertex

those would be used to "plan" a route when for the manual interaction portion.


the classes used as verticies will not be "cities" and may contain more than just a "name"






